nrow(diamonds)
nrow(diamonds_sample)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity), shape = cut)
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity), shape = cut)
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity, shape = cut))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = cut, size = price))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = cut, color = clarity, size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = cut, color = price, size = price))
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) +
geom_col(mapping = aes(x = carat, y = price, fill = clarity))
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, fill = clarity), position = fill)
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, fill = clarity), position = "fill")
# Draw the same chart again, but with each element positioned to "dodge" each other
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, fill = clarity), position = "dodge")
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity))
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity), position ="jitter")
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color, y = price))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = color, y = price)) +
scale_y_log10()
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_log10()
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
ggplot(data = diamonds) +
geom_violin(mapping = aes(x = color, y = price)) +
scale_y_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds) +
geom_bin2d(mapping = aes(x = carat, y = price))
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Set3")
?map_data()
library("map")
library("maps")
?map_data()
?map_data()
library("ggplot2")
?map_data()
county_map <- map_data("county")
View(county_map)
View(wa_crime_report)
wa_crime_report <- read.csv("Criminal_Justice_Data_Book.csv")
setwd("~/final_project_info_201")
wa_crime_report <- read.csv("Criminal_Justice_Data_Book.csv")
ny_crime_report <- read.csv("Index__Violent__Property__and_Firearm_Rates_By_County__Beginning_1990.csv")
View(wa_crime_report)
wa_crime_report$county <- tolower(wa_crime_report$county)
View(wa_crime_report)
ny_crime_report$County <- tolower(ny_crime_report)
ny_crime_report$County <- tolower(ny_crime_report$County)
View(ny_crime_report)
joined_wa <- left_join(county_map, wa_crime_report, by = "year")
library("dplyr")
joined_wa <- left_join(county_map, wa_crime_report, by = "year")
joined_wa <- left_join(county_map, wa_crime_report, by = ("subregion" = "county"))
joined_wa <- left_join(county_map, wa_crime_report, by = c("subregion" = "county"))
View(joined_wa)
library("ggplot2")
library("maps")
joined_wa <- left_join(wa_crime_report, county_map, by = c("subregion" = "county"))
joined_wa <- left_join(wa_crime_report, county_map, by = c("county" = "subregion"))
View(joined_wa)
filtered_wa <- select(wa_crime_report, year, county, SRS_TOTAL)
joined_wa <- left_join(wa_crime_report, county_map, by = c("county" = "subregion"))
View(joined_wa)
wa_crime_report$county <- tolower(wa_crime_report$county)
filtered_wa <- select(wa_crime_report, year, county, SRS_TOTAL)
joined_wa <- left_join(filtered_wa, county_map, by = c("county" = "subregion"))
View(joined_wa)
ggplot(data = joined_wa) +
geom_polygon(aes(x = long, y = lat, group = group, fill = SRS_TOTAL)) +
coord_quickmap()
?map_data()
joined_wa <- inner_join(filtered_wa, county_map, by = c("county" = "subregion"))
View(joined_wa)
ggplot(data = joined_wa) +
geom_polygon(aes(x = long, y = lat, group = group, fill = SRS_TOTAL)) +
coord_quickmap()
joined_wa <- left_join(filtered_wa, county_map, by = c("county" = "subregion"))
View(joined_wa)
ggplot(data = joined_wa) +
geom_polygon(aes(x = long, y = lat, group = group, fill = SRS_TOTAL)) +
coord_quickmap()
wa_county_map <- subset(county_map, region = "washington")
View(wa_county_map)
wa_county_map <- subset(county_map, region = "washington")
View(wa_county_map)
wa_county_map <- filter(county_map, region == "washington")
View(wa_county_map)
joined_wa <- left_join(filtered_wa, wa_county_map, by = c("county" = "subregion"))
View(joined_wa)
ggplot(data = joined_wa) +
geom_polygon(aes(x = long, y = lat, group = group, fill = SRS_TOTAL)) +
coord_quickmap()
ggplot(data = joined_wa) +
geom_polygon(aes(x = long, y = lat, group = group, fill = SRS_TOTAL)) +
coord_quickmap() +
scale_color_brewer(palette = "Set3")
ggplot(data = joined_wa) +
geom_polygon(aes(x = long, y = lat, group = group, fill = SRS_TOTAL)) +
coord_quickmap() +
scale_fill_gradient(limits = range(joined_wa$SRS_TOTAL),
low = "white", high = "red")
ggplot(data = joined_wa) +
geom_polygon(aes(x = long, y = lat, group = group, fill = SRS_TOTAL)) +
coord_quickmap() +
scale_fill_gradient(limits = range(joined_wa$SRS_TOTAL),
low = "yellow", high = "red")
ggplot(data = joined_wa) +
geom_polygon(aes(x = long, y = lat, group = group, fill = SRS_TOTAL)) +
coord_quickmap() +
scale_fill_gradient(limits = range(joined_wa$SRS_TOTAL),
low = "orange", high = "red")
ggplot(data = joined_wa) +
geom_polygon(aes(x = long, y = lat, group = group, fill = SRS_TOTAL)) +
coord_quickmap() +
scale_fill_gradient(limits = range(joined_wa$SRS_TOTAL),
low = "black", high = "red")
ggplot(data = joined_wa) +
geom_polygon(aes(x = long, y = lat, group = group, fill = SRS_TOTAL)) +
coord_quickmap() +
scale_fill_gradient(limits = range(joined_wa$SRS_TOTAL),
low = "pink", high = "red")
ny_county_map <- filter(county_map, region == "new york")
View(ny_county_map)
joined_ny <- left_join(filtered_ny, ny_county_map, by = c("County" = "subregion"))
filtered_ny <- select(ny_crime_report, Year, County, Violent Rate)
filtered_ny <- select(ny_crime_report, Year, County, Violent_Rate)
View(ny_crime_report)
filtered_ny <- select(ny_crime_report, Year, County, Violent.Rate)
ny_county_map <- filter(county_map, region == "new york")
joined_ny <- left_join(filtered_ny, ny_county_map, by = c("County" = "subregion"))
View(joined_ny)
joined_wa_ny <- full_join(joined_wa, joined_ny)
View(joined_wa_ny)
View(filtered_ny)
if (dataset == "New York") {
selected_data <- joined_ny
} else if (dataset == "Washington") {
selected_data <- joined_wa
}
dataset <- input$dataset
if (dataset == "New York") {
selected_data <- joined_ny
} else if (dataset == "Washington") {
selected_data <- joined_wa
}
setwd("~/final_project_info_201")
dataset <- input$dataset
if(input$dataset == "New York") {
filtered_vio_ny <- filtered_table %>%
select(Year, ny_ave_violent)
} else if(input$dataset == "Washington") {
filter_vio_wa <- filtered_table %>%
select(Year, wa_ave_violent)
} else if(input$dataset == "Both") {
filter_vio_both <- filtered_table %>%
select(Year, wa_ave_violent, ny_ave_violent)
}
my_server <- function(input, output) {
ouput$vio_table <- renderDataTable({
filtered_table <- wa_ny_crime_df
if(input$dataset == "New York") {
filtered_vio_ny <- filtered_table %>%
select(Year, ny_ave_violent)
} else if(input$dataset == "Washington") {
filter_vio_wa <- filtered_table %>%
select(Year, wa_ave_violent)
} else if(input$dataset == "Both") {
filter_vio_both <- filtered_table %>%
select(Year, wa_ave_violent, ny_ave_violent)
}
if(input$year == "2010's") {
filtered_table <- filtered_table %>%
filter(Year == c(input$year : 2016))
} else{
filtered_table <- filtered_table %>%
filter(Year == c(input$year : (input$year + 9)))
}
filtered_table
})
output$pro_table <- renderDataTable({
filtered_table <- wa_ny_crime_df
if(input$dataset == "New York") {
filtered_pro_ny <- filtered_table %>%
select(Year, ny_ave_proporty)
} else if(input$dataset == "Washington") {
filter_pro_wa <- filtered_table %>%
select(Year, wa_ave_proporty)
} else if(input$dataset == "Both") {
filter_pro_both <- filtered_table %>%
select(Year, wa_ave_proporty, ny_ave_proporty)
}
if(input$year == "2010's") {
filtered_table <- filtered_table %>%
filter(Year == c(input$year : 2016))
} else{
filtered_table <- filtered_table %>%
filter(Year == c(input$year : (input$year + 9)))
}
filtered_table
})
output$plot <- renderPlot({
dataset <- input$dataset
if (dataset == "New York") {
selected_data <- joined_ny
} else if (dataset == "Washington") {
selected_data <- joined_wa
}
ggplot(data = selected_data) +
geom_polygon(aes(x = long, y = lat, group = group, fill = selected_data[3])) +
coord_quickmap() +
scale_fill_gradient(limits = range(joined_wa$SRS_TOTAL),
low = "pink", high = "red")
})
}
if (dataset == "New York") {
selected_data <- joined_ny
} else if (dataset == "Washington") {
selected_data <- joined_wa
}
dataset <- input$dataset
joined_wa_ny <- full_join(filtered_ny, filtered_wa)
joined_wa_ny <- full_join(joined_wa, joined_ny)
View(joined_wa_ny)
dataset <- input$dataset
dataset <- input$dataset
dataset <- input$dataset
if(input$dataset == "New York") {
filtered_pro_ny <- filtered_table %>%
select(Year, ny_ave_proporty)
} else if(input$dataset == "Washington") {
filter_pro_wa <- filtered_table %>%
select(Year, wa_ave_proporty)
} else if(input$dataset == "Both") {
filter_pro_both <- filtered_table %>%
select(Year, wa_ave_proporty, ny_ave_proporty)
}
year <- input$year
dataset <- input$dataset
year <- input$year
my_ui <- fluidPage(
titlePanel("Eastern and Western Crime Rate"),
h1("The crime rate of representive state in Eastern and Western States of
U.S.A in past three decades"),
p("We are focusing on researching Washington State and New York State which
can represent most for East and West in United States. There are a lot of
important changes happened in past threee decades. We will explore those
changes in history along with criminal rates."),
sidebarLayout(
sidebarPanel(
selectInput("dataset", "Choose the state you want to search:",
choices = c("New York", "Washington", "Both")),
radioButtons(inputId = "year", label = "choose the time period you want to search:",
choices = list("1990's" = 1990,
"2000's" = 2000,
"2010's" = 2010),
selected = "1990's")
),
mainPanel(
tablepanel(type = "tabs",
tablepanel("plot", plotOutput("plot")),
tablepanel("dataTable", dataTableOutput("vio_table"),
tablepanel("dataTable", dataTableOutput("pro_table"))
)
)
)
)
)
library("shiny")
dataset <- input$dataset
library("shiny")
year <- input$year
dataset <- input$dataset
library("shiny")
year <- input$year
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dataset <- input$dataset
runApp()
dataset <- input$dataset
runApp()
runApp()
runApp()
runApp()
year <- input$year
library("dplyr")
library("ggplot2")
library("maps")
library("shiny")
library("shiny")
runApp()
dataset <- input$dataset
library("tidyr")
dataset <- input$dataset
if(input$dataset == "New York") {
filtered_vio_ny <- filtered_table %>%
select(Year, ny_ave_violent)
} else if(input$dataset == "Washington") {
filter_vio_wa <- filtered_table %>%
select(Year, wa_ave_violent)
} else if(input$dataset == "Both") {
filter_vio_both <- filtered_table %>%
select(Year, wa_ave_violent, ny_ave_violent)
}
filtered_pro_ny <- filtered_table %>%
select(Year, ny_ave_proporty)
setwd("~/final_project_info_201")
dataset <- input$dataset
runApp()
year <- input$year
selected_data <- joined_wa
if (input$dataset == "New York") {
selected_data <- joined_ny
} else if (input$dataset == "Washington") {
selected_data <- joined_wa
}
runApp()
if(input$year == "2010's") {
filtered_table <- filtered_table %>%
filter(Year == c(input$year : 2016))
} else{
filtered_table <- filtered_table %>%
filter(Year == c(input$year : (input$year + 9)))
}
source("my_ui.R")
source("my_server.R")
runApp()
dataset <- input$dataset
choice <- input$choice
setwd("~/a8-data-app-chenhannn")
library("shiny")
library("dplyr")
library("ggplot2")
library("tidyr")
library("maps")
options(scipen = 999)
data <- read.csv("data/WBI_Forest_Area_Cleaned.csv")
data_new <- gather(data,
key = year,
value = value,
6:30 , na.rm = T)
data_new$year <- as.numeric(substr(data_new$year, 3, 6))
world_map <- map_data("world")
world_map <- mutate(world_map, Country.Code = iso.alpha(region, n = 3))
data_new$Country.Code <- as.character(data_new$Country.Code)
my_server <- function(input, output) {
output$text1 <- renderText({
field <- input$choice
slide_key <- input$slide_key
msg1 <- paste0("The following table shows the ", field, " for all countries
in year ", slide_key, ".")
})
output$table <- renderTable({
slide_key <- input$slide_key
choice <- input$choice
new_data <- filter(data_new, data_new$year == slide_key) %>%
filter(Series.Name == choice) %>%
select(Series.Name, Country.Name, Country.Code, year, value)
new_data
})
output$text2 <- renderText({
field <- input$choice
slide_key <- input$slide_key
msg2 <- paste0("The following graph is a world map, showing the
deforestation rate based on each county's ", field,
" starting from year ", slide_key, " to year 2016.
All countries are divided into four differernt categories
to distinguish their deforestation rate.")
})
output$plot <- renderPlot({
choice <- input$choice
slide_key <- paste0("YR", input$slide_key)
filtered_data <- data[data$Series.Name == choice, ]
filtered_data <- mutate(filtered_data, deforestation =
filtered_data$YR2016 - filtered_data[[slide_key]])
filtered_data <- select(filtered_data, Series.Name, Country.Code, deforestation)
filtered_data$Country.Code <- as.character(filtered_data$Country.Code)
joined_world_map <- left_join(world_map, filtered_data, by = "Country.Code")
joined_world_map <- mutate(joined_world_map,
bin = cut(joined_world_map$deforestation,
breaks = 4,
labels = c("Large decreasing countries",
"Mild decreasing countries",
"Some increasing countries",
"Large increasing countries")))
ggplot(data = joined_world_map) +
geom_polygon(aes(x = long, y = lat, group = group, fill = bin)) +
coord_quickmap() +
scale_color_brewer(palette = "Set3")
})
}
field <- input$choice
setwd("~/final_project_info_201")
runApp()
runApp()
runApp()
dataset <- input$dataset
View(joined_wa)
runApp()
runApp()
colnames(filtered_ny)
colnames(filtered_ny)[1] <- "year"
runApp()
colnames(filtered_ny)
wa_crime_report <- read.csv("Criminal_Justice_Data_Book.csv")
ny_crime_report <- read.csv("Index__Violent__Property__and_Firearm_Rates_By_County__Beginning_1990.csv")
wa_crime_report$county <- tolower(wa_crime_report$county)
filtered_wa <- select(wa_crime_report, year, county, SRS_TOTAL)
wa_county_map <- filter(county_map, region == "washington")
ny_crime_report$County <- tolower(ny_crime_report$County)
filtered_ny <- select(ny_crime_report, Year, County, Violent.Rate)
colnames(filtered_ny)[1] <- "year"
wa_county_map <- filter(county_map, region == "washington")
ny_county_map <- filter(county_map, region == "new york")
joined_wa <- left_join(filtered_wa, wa_county_map, by = c("county" = "subregion"))
joined_ny <- left_join(filtered_ny, ny_county_map, by = c("County" = "subregion"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
