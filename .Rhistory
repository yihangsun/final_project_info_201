# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
annual_salary <- runif(100, -5000, 10000)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
company <- data.frame(employees, salaries, annual_salary)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
company <- data.frame(employees, salaries, annual_salary, stringsAsFactors = FALSE)
employees
salaries
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
company <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
view(salaries)
View(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
View(salaries)
# What was the 2018 salary of Employee 57
salaries[57, "salary_2018"]
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salary_2018 > salaries$salaries_2017
# How many employees got a raise?
nrow(salaries$got_raise == TRUE)
# How many employees got a raise?
salaries[salaries$got_raise , ]
# How many employees got a raise?
nrow(salaries[salaries$got_raise , ])
# How many employees got a raise?
# Normally is salaries$got_raise == TRUE, however, it always return trues.
nrow(salaries[salaries$got_raise ,])
# How many employees got a raise?
# Normally is salaries$got_raise == TRUE, however, it always return trues.
nrow(salaries[salaries$got_raise, salaries$got_raise])
# How many employees got a raise?
# Normally is salaries$got_raise == TRUE, however, it always return trues.
nrow(salaries[salaries$got_raise , ])
# What was the dollar value of the highest raise?
max(salaries$salary_adjustments)
salaries[salories$salary_adjustments == max(salaries$salary_adjustments), "employees"]
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "employees"]
salaries[salaries$got_raise , ]
salaries[salaries$got_raise, "got_raise" ]
nrow(salaries[salaries$got_raise, "got_raise" ])
salaries[salaries$got_raise, "got_raise" ]
salaries[salaries$got_raise, "got_raise" ]
nrow(salaries[salaries$got_raise, "got_raise" ])
salaries[salaries$got_raise, "got_raise" ]
birthdays <- list(
Yilun = as.Date("13mar1997", "%d%b%Y"), Kevin
= as.Date("13mar1997", "%d%b%Y"), Chunyan
= as.Date("03feb1974", "%d%b%Y"), Wenjie = as.Date("08aug1970", "%d%b%Y")
)
print(parent_bday)
print(birthdays_2019)
date_has_passed <- function(date) {
name <- as.Date(date) - Sys.Date()
passed <- name < 0
passed
}
print(date_has_passed("2019/01/23"))
print(date_has_passed("2019/01/20"))
make_birthday_announcement <- function(name_string, birthday_date) {
bdate_value <- as.Date(birthday_date)
gap <- bdate_value - Sys.Date()
if (date_has_passed(birthday_date) == TRUE) {
nextyear_bdate_value <- as.Date(format(bdate_value, "2020/%m/%d"))
gap_nextyear <- nextyear_bdate_value - Sys.Date()
paste(name_string, "'s birthday is in", gap_nextyear, "days")
}
else {
paste(name_string, "'s birthday is in", gap, "days")
}
}
print(make_birthday_announcement("Tina", "2019/01/01"))
print(make_birthday_announcement("Tina", "2019/02/24"))
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays )
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019 )
print(bday_announcements)
# Write a .csv file of your salary data to your working directory
Tina_money <- data.frame(爸爸给的钱, house, outcome_Haosen, weekly_income);
# Write a .csv file of your salary data to your working directory
Tina_money <- data.frame(income_dad, house, outcome_Haosen, weekly_income, weekly_left, monthly_left);
# Write a .csv file of your salary data to your working directory
Tina_money <- data.frame(monthly_income, house, outcome_Haosen, weekly_income, weekly_left, monthly_left);
# Write a .csv file of your salary data to your working directory
Tina_money <- data.frame(monthly_income, house, outcome_Haosen, weekly_income, weekly_left, monthly_left);
# Write a .csv file of your salary data to your working directory
Tina_money <- data.frame(income, house, outcome_Haosen, weekly_income, weekly_left, monthly_left);
# Write a .csv file of your salary data to your working directory
Tina_money <- data.frame(income, house, outcome_Haosen, weekly_income, weekly_left, monthly_left, stringsAsFactors = FALSE);
# Write a .csv file of your salary data to your working directory
Tina_money <- data.frame(income, house, outcome_Haosen, weekly_income, stringsAsFactors = FALSE);
# Write a .csv file of your salary data to your working directory
Tina_money <- data.frame("income", "house", "outcome_Haosen", "weekly_income", stringsAsFactors = FALSE);
# Write a .csv file of your salary data to your working directory
Tina_money <- data.frame("income", "house", "outcome_Haosen", "weekly_income", "weekly_left", "monthly_left", stringsAsFactors = FALSE);
# Write a .csv file of your salary data to your working directory
Tina_money <- data.frame("income", "house", "outcome_Haosen", "weekly_income", "weekly_left", "monthly_left", stringsAsFactors = FALSE);
View(Tina_money)
# Write a .csv file of your salary data to your working directory
Tina_badge <- data.frame("income", "house", "outcome_Haosen", "weekly_income", "weekly_left", "monthly_left", stringsAsFactors = FALSE);
# Write a .csv file of your salary data to your working directory
income <- c(2500);
# Write a .csv file of your salary data to your working directory
income <- c(2492);
house <- c(1700);
income <- c(2492);
house <- c(1700);
outcome_Haosen <- c(792);
weekly_income <- c(200);
weekly_left <- c(0);
monthly_left <- c(0);
Tina_badge <- data.frame(income, house, outcome_Haosen, weekly_income, weekly_left, monthly_left, stringsAsFactors = FALSE);
View(Tina_badge);
survival_rate("1st")
survival_rate("2nd")
View(Titanic)
help(Titanic)
is.data.frame(Titanic)
titanic <- data.frame(Titanic)
View(titanic)
children <- titanic[titanic$Age == "Child" ,]
children_num <- sum(children$Freq, na.rm = TRUE)
print(children_num)
loss <- titanic[titanic$Survived == "No" ,]
print(loss[titanic$Freq == max(titanic$Freq) ,])
# The most loss in Titanic was crew of the ship. They were exchanging their
# lives to save others' lives.
# given a ticket class name and returns their adults male survived percentage
# women and children survival rate within the class.
survival_rate <- function(ticket_class) {
total <- titanic[titanic$Class == ticket_class ,] # given class data frame
total_people <- sum(total$Freq, na.rm = TRUE) #died and alived
survived <- total[total$Survived == "Yes" ,]
total_survived <- sum(survived$Freq, na.rm = TRUE)
male <- survived[c(survived$Sex == "Male", survived$Age == "Adult") ,]
male_total <- sum(male$Freq, na.rm = TRUE)
female_children_percent <- round((total_survived - male_total) * 100/
total_people, digits = 0)
print(paste0("Of ", ticket_class, " calss, ", round(male_total * 100 /
total_people, digits = 0), "% of men survived and ",
female_children_percent, "% of women and children survived."))
}
survival_rate("1st")
survival_rate("2nd")
survival_rate("3rd")
# No matter what classes, poeple always needed to protect women and children.
# given a ticket class name and returns their adults male survived percentage
# women and children survival rate within the class.
survival_rate <- function(ticket_class) {
total <- titanic[titanic$Class == ticket_class ,] # given class data frame
total_people <- sum(total$Freq, na.rm = TRUE) #died and alived
total_male_data <- total[c(total$Sex == "Male", total$Age == "Adult") ,]
total_male <- sum(total_male_data$Freq, na.rm = TRUE) #died and alived males
survived <- total[total$Survived == "Yes" ,]  # survived data frame
total_survived <- sum(survived$Freq, na.rm = TRUE)
male_survived <- survived[c(survived$Sex == "Male", survived$Age == "Adult"),]
total_survived_male <- sum(male_survived$Freq, na.rm = TRUE)
female_children_percent <- round((total_survived - total_survived_male) * 100/
(total_people - total_male), digits = 0)
print(paste0("Of ", ticket_class, " calss, ", round(total_survived_male * 100/
total_male, digits = 0), "% of men survived and ",
female_children_percent, "% of women and children survived."))
}
survival_rate("1st")
survival_rate("2nd")
survival_rate("3rd")
vehicles %>%
filter(cty > 20) %>%
count() %>%
pull(n)
vehicles %>%
filter(cty > 20) %>%
count() %>%
pull(n)
library(vehicles)
package(dplyr)
package("dplyr")
library("pscl")
vehicles %>%
filter(cty > 20) %>%
count() %>%
pull(n)
View(Vehicles)
install.pacjages("pscl")
library("pscl")
View(presidentialElections)
vehicles %>%
filter(cty == max(cty)) %>%
pull(model)
vehicles %>%
filter(cty == max(cty)) %>%
pull(model)
presidentialElections %>%
summarize(
mean_dem_vote = mean(demVote)
)
install.packages("dplyr")
library("dplyr")
presidentialElections %>%
summarize(
mean_dem_vote = mean(demVote)
)
presidentialElections %>%
summarize(
mean_dem_vote = mean(demVote)
max_dem_vote = max(demVote)
)
presidentialElections %>%
summarize(
mean_dem_vote = mean(demVote)
max_dem_vote = max(demVote)
)
presidentialElections %>%
summarize (
mean_dem_vote = mean(demVote)
max_dem_vote = max(demVote)
)
presidentialElections %>%
grouped <- group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other._parties_vote)
)
grouped <- group_by(presidentialElections, state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other._parties_vote)
)
grouped <- group_by(presidentialElections, state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
grouped <- group_by(presidentialElections, state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
grouped <- group_by(presidentialElections, state) %>%
filter(demVote == max(demVote)) %>%
View()
group_by(presidentialElections, state) %>%
summarize(
mean_dem_vote = mean(demVote),
max_dem_vote = max(demVote)
)
filter(mean_dem_vote == min(mean_dem_vote)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
View("nycflights13")
View(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
install.packages("dplyr")
install.packages("dplyr")
library("nycflights13")
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
group_by(nycflights13, dep_delay_by_month) %>%
summarize(
mean_delay = mean(dep_delay_by_month)
)
View(nycflights13)
View("nycflights13")
library("dplyr")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
View(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
group_by(nycflights13, dep_delay_by_month) %>%
summarize(
mean_delay = mean(dep_delay_by_month)
)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")  # should be done already
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
group_by(nycflights13, dep_delay_by_month) %>%
summarize(
mean_delay = mean(dep_delay_by_month)
)
View(nycflights13)
?nycflights13
View(flights)
View(flights)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
group_by(nycflights13, dep_delay_by_month) %>%
summarize(
mean_delay = mean(dep_delay_by_month)
)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
group_by(flights, dep_delay_by_month) %>%
summarize(
mean_delay = mean(dep_delay_by_month)
)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
group_by(flights, dep_delay) %>%
summarize(
mean_delay = mean(dep_dela)
)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
group_by(flights, dep_delay) %>%
summarize(
mean_delay = mean(dep_delay)
)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
group_by(flights, month) %>%
summarize(
mean_delay = mean(dep_delay)
)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
group_by(flights, month) %>%
summarize(
mean_delay_by_month = mean(dep_delay)
)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
group_by(flights, month) %>%
summarize(
mean_delay_by_month = mean(dep_delay, na.rm = TRUE)
)
# Which month had the greatest average departure delay?
flights[mean_delay_by_month == max(mean_delay_by_month)]
# Which month had the greatest average departure delay?
flights[mean_delay_by_month == max(mean_delay_by_month)]
# Which month had the greatest average departure delay?
group_by(flights, month) %>%
summarize(
mean_delay_by_month = mean(dep_delay, na.rm = TRUE)
) %>%
filter(mean_delay_by_month == max(mean_delay_by_month)) %>%
select(month)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
delay_by_month <- group_by(flights, month) %>%
summarize(
mean_delay_by_month = mean(dep_delay, na.rm = TRUE)
)
# Which month had the greatest average departure delay?
delay_by_month %>%
filter(mean_delay_by_month == max(mean_delay_by_month)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(delay_by_month)
View(flights)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(
mean_arr_delay = mean(arr_delay)
) %>%
filter(dest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(
mean_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(dest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(
mean_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(mean_arr_dealy == max(mean_arr_delay))
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(
mean_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(mean_arr_dealy == max(mean_arr_delay))
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(
mean_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(mean_arr_delay == max(mean_arr_delay))
head()
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(
mean_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(mean_arr_delay == max(mean_arr_delay)) %>%
head()
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(
mean_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(mean_arr_delay == max(mean_arr_delay)) %>%
select(dest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(
mean_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(mean_arr_delay == max(mean_arr_delay)) %>%
select(dest)
# Which month had the greatest average departure delay?
delay_by_month %>%
filter(mean_delay_by_month == max(mean_delay_by_month)) %>%
select(month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(
mean_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(mean_arr_delay == max(mean_arr_delay)) %>%
select(dest)
ave_arr_delay
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(
mean_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(mean_arr_delay == max(mean_arr_delay, na.rm = TRUE)) %>%
select(dest)
ave_arr_delay
# You can look up these airports in the `airports` data frame!
airports
# You can look up these airports in the `airports` data frame!
View(airports)
airports %>%
filter(faa == "CAE")
